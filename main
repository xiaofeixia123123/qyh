import open3d as o3d
import numpy as np

# 读取点云文件
points = np.loadtxt("point_cloud3.txt", usecols=(0, 1, 2))

# 创建Open3D点云对象
pcd = o3d.geometry.PointCloud()
pcd.points = o3d.utility.Vector3dVector(points)


# 定义均匀重采样函数
def uniform_sampling(pcd, n_points):
    # 使用uniform_down_sample函数进行均匀采样
    return pcd.uniform_down_sample(n_points)


# 定义体素下采样函数
def voxel_downsampling(pcd, voxel_size):
    return pcd.voxel_down_sample(voxel_size)


# 定义函数用于计算法线
def compute_normals(pcd, radius, max_nn):
    pcd.estimate_normals(o3d.geometry.KDTreeSearchParamHybrid(radius=radius, max_nn=max_nn))


# 定义函数用于创建三角面片网格
def create_mesh(pcd, triangles):
    mesh = o3d.geometry.TriangleMesh()
    mesh.vertices = pcd.points
    mesh.triangles = o3d.utility.Vector3iVector(triangles)
    return mesh


# 定义函数用于计算纹理坐标
def compute_texture_coords(pcd):
    points_array = np.asarray(pcd.points)
    texture_coords = []
    for i in range(len(points_array)):
        vertex = points_array[i]
        # 根据顶点的位置计算纹理坐标
        u = (vertex[0] - np.min(points_array[:, 0])) / (np.max(points_array[:, 0]) - np.min(points_array[:, 0]))
        v = (vertex[1] - np.min(points_array[:, 1])) / (np.max(points_array[:, 1]) - np.min(points_array[:, 1]))
        w = (vertex[2] - np.min(points_array[:, 2])) / (np.max(points_array[:, 2]) - np.min(points_array[:, 2]))
        texture_coords.append([u, v, w])
    return texture_coords


# 设置参数
batch_size = 1000
voxel_size = 0.8
radii = [1, 1, 1]
radius = voxel_size * 2
max_nn = 30

# 分批处理点云
batches = range(0, len(pcd.points), batch_size)
triangles = []
texture_coords = []

for i, batch_start in enumerate(batches):
    batch_end = min(batch_start + batch_size, len(pcd.points))
    batch_pcd = voxel_downsampling(pcd, voxel_size)#voxel_down_sample() 方法只接受一个参数 voxel_size，而不是 batch_start 和 batch_end。

    # 均匀重采样
    downsampled = uniform_sampling(batch_pcd, 1)

    # 体素下采样
    downsampled = voxel_downsampling(batch_pcd, voxel_size)

    # 计算法线
    compute_normals(downsampled, radius, max_nn)

    # 用Ball Pivoting算法重建三角面片
    bpa_mesh = create_mesh(downsampled, triangles)

    # 提取三角面片的顶点索引
    triangles.extend(np.asarray(bpa_mesh.triangles))

    # 计算纹理坐标
    texture_coords.extend(compute_texture_coords(downsampled))

# 创建纹理对象
image = o3d.io.read_image("1.png")
texture = o3d.geometry.Image(image)

# 创建三角面片网格对象

mesh = o3d.geometry.TriangleMesh()
mesh.vertices = o3d.utility.Vector3dVector(pcd.points)
mesh.triangles = o3d.utility.Vector3iVector(triangles)
# 设置基础颜色为白色
mesh.paint_uniform_color([1.0, 1.0, 1.0])


# 创建可视化窗口并添加三维模型
visualizer = o3d.visualization.Visualizer()
visualizer.create_window()
visualizer.add_geometry(mesh)

# 将窗口设置为框架模式
visualizer.get_render_option().mesh_show_wireframe = True
# 设置相机参数和窗口背景颜色
visualizer.get_render_option().point_size = 3
visualizer.get_render_option().background_color = np.asarray([0, 0, 0])

visualizer.run()
visualizer.destroy_window()
